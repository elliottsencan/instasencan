(function() {
    'use strict';

    angular
        .module('instatest.config', [])
        .run(Run);

    Run.$inject = ['$rootScope'];

    function Run($rootScope) {
        $rootScope.safeApply = function(fn) {
            var phase = $rootScope.$$phase;
            if (phase === '$apply' || phase === '$digest') {
                if (fn && (typeof(fn) === 'function')) {
                    fn();
                }
            } else {
                this.$apply(fn);
            }
        };
    }


})();
(function() {
    'use strict';


    angular
        .module('instatest.constants', [])
        .constant('ACCESS_TOKEN', '1483275.5b9e1e6.0e1ebb1c18344fe6be64ac91aa3e0dc7');


})();
(function(){
	'use strict';

	angular
		.module('instatest', [
			'instatest.constants',
			'instatest.config',
			'instatest.routes',
			'instatest.body',
			'instatest.slideshow',
			'instatest.animations'
			]);

})();
(function(){
	'use strict';

	angular
		.module('instatest.routes', ['ngRoute'])
		.config(RouterConfig);

		RouterConfig.$inject = ['$routeProvider', '$locationProvider'];

		function RouterConfig ($routeProvider, $locationProvider) {
			$routeProvider
            .when('/tag/:tag', {
                controller: 'bodyCtrl'
            })
            .otherwise({
                redirectTo: '/'
            });
		}
})();

(function() {
    'use strict';

    angular
        .module('instatest.slideshow', ['instatest.api', 'instatest.slideshow.components'])
        .directive('slideshow', Slideshow);

    Slideshow.$inject = ['instagramEndpoint', '$timeout', '$rootScope'];

    function Slideshow(instagramEndpoint, $timeout, $rootScope) {
        return {
            restrict: 'E',
            require: '^ngModel',
            scope: {
                ngModel: '='
            },
            template: [
                '<div class="slider-container centered" ng-class="{loading: loading === true, error: error === true}" ng-mouseover="clearTimer()" ng-mouseleave="startTimer()">',
                '<loader></loader>',
                '<error error="errorMessage"></error>',
                '<div class="slider">',
                '<div class="slide">',
                '<img text-fade="index" ng-animate="\'animate\'" imageloader ng-src="{{currentImage.images.standard_resolution.url}}" />',
                '</div>',
                '<div class="arrows">',
                '<a class="prev" ng-click="updateIndex(-1)">',
                '<span class="icon-wrap">',
                '<svg class="icon" width="32" height="32" viewBox="0 0 64 64">',
                '<use xlink:href="#arrow-left-3"></use>',
                '</svg>',
                '</span>',
                '<div>',
                '</div>',
                '</a>',
                '<a class="next" ng-click="updateIndex(+1)">',
                '<span class="icon-wrap">',
                '<svg class="icon" width="32" height="32" viewBox="0 0 64 64">',
                '<use xlink:href="#arrow-right-3"></use>',
                '</svg>',
                '</span>',
                '<div>',
                '</div>',
                '</a>',
                '</div>',
                '</div>',
                '<div text-fade="index" class="info" ng-animate=" \'animate\' ">',
                '<user image="currentImage"></user>',
                '<likes image="currentImage"></likes>',
                '<comments image="currentImage"></comments>',
                '</div>'
            ].join(''),
            controller: SlideshowController,
            link: SlideshowLink
        }

        function SlideshowController($scope) {

            var timer,
                delay = 5000;

            $scope.startTimer = startTimer;
            $scope.clearTimer = clearTimer;
            $scope.getImages = getImages;
            $scope.updateIndex = updateIndex;
            $scope.$on('$destroy', function() {
                clearTimer(); // when the scope is getting destroyed, cancel the timer
            });


            function startTimer() {
                timer = $timeout(function() {
                    $scope.updateIndex(+1);
                    timer = $timeout(startTimer, delay);
                }, delay);
            };

            function clearTimer() {
                $timeout.cancel(timer);
            }

            function getImages(tag) {
                $scope.loading = true;
                clearTimer();
                //could be better, promise maybe?
                instagramEndpoint.searchTag(tag,
                    function success(data) {
                        $rootScope.safeApply(function() {
                            $scope.images = data;
                            if ($scope.images.length === 0) {
                                $scope.loading = false;
                                $scope.error = true;
                            } else {
                                $scope.currentImage = $scope.images[0];
                                $scope.loading = false;
                                $scope.error = false;
                                startTimer();
                            }
                        });
                    },
                    function error(error) {
                        $scope.error = true;
                        $scope.errorMessage = error;
                    }
                )
            }

            function updateIndex(offset) {


                if (!!isNaN(parseFloat(offset))) {
                    return false;
                }

                var oldIndex = $scope.index,
                    newIndex = oldIndex + offset;

                if (newIndex === -1) {
                    newIndex = $scope.images.length - 1;
                }

                if (newIndex === $scope.images.length) {
                    newIndex = 0;
                }

                $scope.index = newIndex;

                $timeout(function() {
                    $scope.currentImage = $scope.images[$scope.index];
                }, 250);


            }
        }

        function SlideshowLink(scope, iElement, iAttrs, ngModelController) {

            scope.index = 0;
            scope.loading = true;
            scope.error;

            scope.getImages(scope.ngModel);

            scope.$watch('ngModel', function(newVal, oldVal) {
                if (newVal && (newVal !== oldVal)) {
                    scope.getImages(scope.ngModel);
                }
            });
        }

    }
})();
(function() {
    'use strict';

    angular
        .module('instatest.animations', ['ngAnimate'])
        .directive('imageloader', ImageOnload)
        .directive('textFade', TextFade);

    function ImageOnload() {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                element.bind('load', function() {
                    element[0].classList.add('visible');
                });
            }
        };
    }

    TextFade.$inject = ['$animate'];

    function TextFade($animate) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                scope.$watch(attrs.textFade, function(newVal, oldVal) {
                    if (newVal !== oldVal) {
                        $animate.addClass(element, 'fadeOut', function() {
                            $animate.removeClass(element, 'fadeOut');
                        });
                    }
                })
            }
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('instatest.slideshow.components', [])
        .directive('user', User)
        .directive('likes', Likes)
        .directive('loader', Loader)
        .directive('error', Error)
        .directive('ngEnter', NgEnter)
        .directive('comments', Comments);

    function User() {
        return {
            restrict: 'E',
            scope: {
                image: '='
            },
            template: [
                '<div class="info-user">',
                '<img ng-src="{{image.user.profile_picture}}" />',
                '<h5>{{ image.user.full_name }}</h5>',
                '<p class="time">{{ image.created_time | date:"medium" }}</p>',
                '<p class="caption">{{ image.caption.text }}</p>',
                '</div>'
            ].join('')
        };
    }

    function Likes() {
        return {
            restrict: 'E',
            scope: {
                image: '='
            },
            template: [
                '<div class="info-likes">',
                '<p><a ng-repeat="liker in image.likes.data | limitTo:2">{{liker.username}}, </a>',
                'and {{image.likes.count - 2}} others like this photo</p>',
                '</div>'
            ].join('')
        };
    }

    function Comments() {
        return {
            restrict: 'E',
            scope: {
                image: '='
            },
            template: [
                '<ul class="info-comments">',
                '<li class="comment" ng-repeat="comment in image.comments.data">',
                '<cite class="author">',
                '<img ng-src="{{ comment.from.profile_picture }}" width="60" height="60" />',
                '{{ comment.from.username }}',
                '</cite>',
                '<p>{{ comment.text }}</p>',
                '</li>',
                '</ul>',
                '<img class="qr" ng-src="http://datamatrix.kaywa.com/img.php?s=8&d={{ image.link }}" />',
            ].join('')
        };
    }

    function Loader() {
        return {
            restrict: 'E',
            template: [
                '<div class="loader">',
                '<svg>',
                '<path d="m 12.5,20 15,0 0,0 -15,0 z" class="led one"/>',
                '<path d="m 32.5,20 15,0 0,0 -15,0 z" class="led two"/>',
                '<path d="m 52.5,20 15,0 0,0 -15,0 z" class="led three"/>',
                '<path d="m 72.5,20 15,0 0,0 -15,0 z" class="led four"/>',
                '</svg>',
                '</div>',
            ].join('')
        };
    }

    function NgEnter() {
        return function(scope, element, attrs) {
            element.bind("keydown keypress", function(event) {
                if (event.which === 13) {
                    scope.$apply(function() {
                        scope.$eval(attrs.ngEnter);
                    });

                    event.preventDefault();
                }
            });
        };
    }

    function Error() {
        return {
            restrict: 'E',
            scope: {
                error: '='
            },
            template: [
                '<div class="error">',
                '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">',
                '<path id="error-3-icon" d="M341.328,50H170.672L50,170.672v170.656L170.672,462h170.656L462,341.328V170.672L341.328,50z',
                'M256.46,398.518c-16.207,0-29.345-13.139-29.345-29.346c0-16.205,13.138-29.342,29.345-29.342',
                'c16.205,0,29.342,13.137,29.342,29.342C285.802,385.379,272.665,398.518,256.46,398.518z M295.233,158.239',
                'c-2.481,19.78-20.7,116.08-26.723,147.724c-1.113,5.852-6.229,10.1-12.187,10.1h-0.239c-6.169,0-11.438-4.379-12.588-10.438',
                'c-6.1-32.121-24.293-128.504-26.735-147.971c-2.94-23.441,15.354-44.171,38.977-44.171',
                'C279.674,113.483,298.213,134.488,295.233,158.239z"></path>',
                '</svg>',
                '<div class="error-message">',
                '<h2>There\'s been an error</h2>',
                '<p>Please try searching a different tag or, if your problem persists, please check back later</p>',
                '<small>{{error}}</small>',
                '</div>',
                '</div>',
            ].join('')
        };
    }
})();
(function() {
    'use strict';

    angular
        .module('instatest.body', [])
        .controller('bodyCtrl', BodyCtrl);

    BodyCtrl.$inject = ['$scope'];

    function BodyCtrl($scope) {
        var vm = this;

        vm.tag = 'servicenow';
        vm.taginit = 'servicenow';
        //this should go in a directive
        vm.enterActive = false;

        vm.clearModel = clearModel;
        vm.setModel = setModel;

        function clearModel (){
        	//this should go in a directive
        	vm.enterActive = true;
        	vm.tag = '';
        }

        function setModel (){
        	//this should go in a directive
        	vm.enterActive = false;
        	vm.tag = vm.taginit;
        }

    }
})();
(function() {
    'use strict';

    angular
        .module('instatest.api', ['ngResource', 'instatest.constants'])
        .factory('instagramEndpoint', InstagramEndpoint);

    InstagramEndpoint.$inject = ['$resource', 'ACCESS_TOKEN'];

    function InstagramEndpoint($resource, ACCESS_TOKEN) {
        var service = {
            searchTag: searchTag
        };

        return service;

        function searchTag(tag, callback) {

            var api = $resource('https://api.instagram.com/v1/tags/:tag/media/recent?access_token=:access_token&callback=JSON_CALLBACK', {
                access_token: ACCESS_TOKEN,
                tag: tag
            }, {
                fetch: {
                    method: 'JSONP'
                }
            });

            api.fetch(function(response) {
                callback(response.data);
            });

        }
    }


})();